# -*- coding: utf-8 -*-
"""agenda.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gBrLhC0gGJeXj8JHnjbrUjSTXb-N3HnQ
"""

agenda.py

def crear_contacto(agenda_path):
    """Esta función agrega un contacto a una agenda"""
    nombre = input("Ingrese el nombre del contacto: ")
    telefono = input("Ingrese el telefono de {} :".format(nombre))
    direccion = input("Ingrese la dirección de {} :".format(nombre))
    contacto = {'Nombre':nombre, 'Telefono': telefono, 'Direccion': direccion}
    #Se crea un diccionario llamado contacto para guardar los valores dados por el usuario 

#Se crea una variable agenda, la cual busca el archivo de texto que contiene la información de la agenda almacenada
    agenda = descargar_agenda(agenda_path)
#Se agregan condiciones. Si no hay claves dentro del archivo (diccionario vacío) se le asigna el id 0-0001,
#de lo contrario se le suma uno al ultimo valor [-1] del id"""
    if len(agenda.keys()) == 0:
        id_contact = '0-0001'
    else:
        last_contact = int(list(agenda.keys())[-1].split('-')[-1])+1
        last_contact = (4-len(str(last_contact)))*'0'+str(last_contact)
        id_contact = '0-{}'.format(last_contact)
#Se almacena actualiza la información en la variable agenda creando un diccionario\n
#dentro de otro. Teniendo como llaves el id y como valores el nombre, teléfono y dirección
    agenda.update( {id_contact:contacto} )
    cargar_agenda(agenda_path,agenda) #se cierra con la función cargar_agenda para que se actualice el contenido

def eliminar_contacto(agenda_path):
    """Esta función elimina un contacto de una agenda"""
    # Asinación : Hacer que los identificadores id se reacomoden cuando se elimine un contacto.
    Flag = True
    while Flag: #Mientras la condición se cumpla
      nombre = input("Indique nombre (o parte del nombre) del contacto que desea eliminar de la agenda: ")

#Se crea una variable agenda, la cual busca el archivo de texto que contiene la\n
#información de la agenda almacenada. Se crea un ciclo que recorrerá las llaves (id y nombre) con la función buscar              
      agenda = descargar_agenda(agenda_path)
      print("Identifique el id del usuario que desea eliminar.")
      for element_key,element in buscar(agenda, nombre.lower()):
        print('id: {}\t nombre: {}'.format(element_key, element))

      id = input("Ingrese el id del contacto a eliminar de la agenda: ")
      #"""Esta función sirve para eliminar la llave y el valor"""
      agenda.pop(id)
#se cierra con la función cargar_agenda para que se actualice el contenido       
      cargar_agenda(agenda_path,agenda)
#Se pregunta si quiere eliminar otro contacto. Al marcar 'no' se rompe el ciclo porque la variable asignada\n
#como verdadera, pasa a ser falsa
      continuar =  input("Desea eleminar otro contacto? ( opciones 'si' o 'no'):")
      if continuar.lower() == 'no':
        Flag = False
#"""Importante para evitar que el usuario ingrese otra palabra"""            
      elif continuar.lower() != 'si':
        raise ValueError("Error, las opciones válidas son 'si' o 'no'.")

    
#-------------------------------------------------------------Asignación 4

def editar_contacto(agenda_path):
#"""Esta función funciona para editar el contacto. Teniendo como parametro la ruta donde está la agenda."""

  nombre = input('Ingrese el nombre (o parte del nombre) del contacto que desea editar: ')

#"Se crea una variable agenda, la cual busca el archivo de texto que contiene la\n
#información de la agenda almacenada" 
  agenda = descargar_agenda(agenda_path)
  print ('Identifique el ID del usuario que desea editar')
  for element_key,element in buscar(agenda,nombre.lower()):
    print('ID: {}\tnombre: {}'.format(element_key,element))
    id = input('Ingrese el ID del contacto a editar: ')
#"""Se crea un ciclo, el cual se romperá al escribir la palabra 'salir'"""
    while(True):
        accion = input("¿Qué desea editar del contacto? (Escriba 'nombre','telefono' o 'direccion') \nEn caso de que desee salir, escriba 'salir': ")

        if accion.lower() == 'nombre':
            nombre = input('Ingrese el nuevo nombre: ')
            agenda[id]['Nombre'] = nombre  #"""Se introduce entre corchetes la ubicación del valor a modificar en el diccionario"""

        elif accion.lower() == 'telefono':
            telefono = input('Ingrese el nuevo teléfono: ')
            agenda[id]['Telefono'] = telefono

        elif accion.lower() == 'direccion':
            direccion = input('Ingrese la nueva dirección: ')
            agenda[id]['Direccion'] = direccion

        elif accion.lower() == 'salir':
            break
        else:
            raise ValueError("Error, opción no válida. Las opciones válidas son crear y editar.")

    print('Su contacto ha sido editado')
    cargar_agenda(agenda_path,agenda) #"""se cierra con la función cargar_agenda para que se actualice el contenido"""

#------------------------------------------------------------------------

def cargar_agenda(agenda_path, agenda):
  """La función cargar_agenda crea el archivo de texto donde se
    almacenará una agenda dada y escribe o sustituye su contenido. Se pasa
    como argumento la ruta donde está la agenda y la variable asociada al
    contacto a modificar."""
  #"""Se abre un archivo de texto""" 
  with open(agenda_path+'.txt', 'wt') as file:
    count = 0 #"""Una variable contador"""
    #"""Se usa la función Zip en el ciclo para enlazar los valores de id con la información del usuario"""      
    for id, contenido in zip(agenda.keys(), agenda.values()):
      if count == 0: #"""En caso de no existir id, se copia el formato del primero"""
        id_tag = 'id:{}'.format(id)
        count += 1 #"""Va aumentando"""
      else:
        id_tag = '\nid:{}'.format(id) #"""De lo contrario, hace un salto de linea y añade el id"""
          #"""El contenido del archivo"""
      file.writelines([id_tag,'\n\tContacto:{}'.format(contenido['Nombre']),\
      '\n\tTelefono:{}'.format(contenido['Telefono']),'\n\tDireccion:{}'.format(contenido['Direccion'])])



def descargar_agenda(agenda_path):
    """La función descargar_agenda busca el archivo de texto donde se
    encuentra almacenada una agenda dada y descarga su contenido. Se pasa
    como argumento la ruta donde está la agenda."""

    agenda = {}   #"""Se crea un diccionario vacío, donde se guardará la información del id y contacto usando la función .update"""
    with open(agenda_path+'.txt', 'r') as file:
        content = file.read().split('\n') #""""La variable content lee el archivo fil donde está almacenada la información"""
        if content != ['']: #"""Si está vacía en esa posición. Se crea un ciclo que añadirá el contenido"""
            for i in range(0,len(content),4):
                id = content[i].split(':')[1]
                nombre = content[i + 1].split(':')[1]
                telefono = content[i + 2].split(':')[1]
                direccion = content[i + 3].split(':')[1]
                contacto = {'Nombre': nombre, 'Telefono': telefono, 'Direccion': direccion}
                agenda.update( {id: contacto} ) #"""Se crea un diccionario dentro de otro para guardar la información de usuario y se añade a la variable agenda"""

    return agenda #"""Se retorna agenda como respuesta""""

def crear_si_no_existe(agenda_path):
    """La funcion crear_si_no_existe funcion crea de forma segura el archivo agenda.txt. La
    implementacion se realiza sin importar ningun modulo de python, además, se
    al final del subprograma en comentarios se adjunto una implementacion
    importando el modulo os."""

    try:
        with open('agenda.txt', 'r') as file:
            pass
    except FileNotFoundError:
        with open('agenda.txt', 'w'):
            pass
    # import os.path
    # file_exists = os.path.isfile(agenda_path)
    # if file_exists:
    #   pass
    # else:
    #   with open('agenda.txt', 'w'):
    #       pass



def buscar(agenda, nombre):
  #"""Tiene como parametro dos variables asociadas al contacto"""
  lista_id = [] #""""Se crean dos listas vacias"""
  lista_nombre = []
  for id in agenda.keys(): #"""Se abre un ciclo que recorre las llaves de la agenda (ID)"""
    if nombre.lower() in agenda[id]['Nombre'].lower(): #"""Si encuentra el nombre en la agenda se agrega el ID y el nombre a las listas vacias usando .append"""
      lista_id.append(id)
      lista_nombre.append(agenda[id]['Nombre'])

  return zip(lista_id, lista_nombre) #"""Se devuelven las listas usando la función zip para enlazarlas"""

#-------------------------------------------------------------Asignación 5

def hola_agenda(agenda_path):
  """Tiene como función imprimir la agenda. Usando como parametro la ruta del archivo"""
  """"Se crea una variable agenda cuyo valor es la finción descargar_agenda\n
  La cual será el recorrido que hace la variable buscador en un ciclo for"""
  agenda = descargar_agenda(agenda_path)
  for buscador in agenda: #"""Por cada iteración se agregan los valores y luego se imprimen"""
    i = 'Nombre del contacto {}: {}'.format(buscador,agenda[buscador]['Nombre'])
    j = 'Telefono: {}'.format(agenda[buscador]['Telefono'])
    k = 'Dirección: {}'.format(agenda[buscador]['Direccion'])
    
    print(i)
    print(j)
    print(k)

#-------------------------------------------------------------------------

principal.py

def main():
    """La función main es la instancia principal del programa, utiliza el tipo
    de dato dict para representar la agenda telefónica, así como para
    representar los contactos. Ejemplo:
        contacto1 = {'Nombre':'Carlos C. González E.', 'Telefono': '+58 0412 223
        1222', 'Direccion': 'Colinas de Bellomonte.'}
        contacto2 = {'Nombre':'Pedro P. McFly D.', 'Telefono': '+58 0413 333
        1442', 'Direccion': 'El Recreo.'}
        agenda = {'0-0001': contacto1, '0-0002': contacto2}"""

    print('Lista de contactos:')
    hola_agenda('agenda')  
  
    crear_si_no_existe('agenda.txt')
    
    while(True):
        accion = input("Bienvenido ¿Qué desea hacer en esta agenda? (Escriba 'crear', 'editar', 'eliminar' o 'salir'): ")

        if accion.lower() == 'crear':
            from agenda.py import crear_contacto('agenda')
        elif accion.lower() == 'editar':
            from agenda.py import editar_contacto('agenda')           
        elif accion.lower() == 'eliminar':
            from agenda.py import eliminar_contacto('agenda')
        elif accion.lower() == 'salir':
            break
        else:
            raise ValueError("Error, opción no válida. Las opciones válidas son crear, editar, eliminar o salir.")

    print("Fin del programa. Gracias por utilizar la agenda")


archivo = open('agenda.txt','at')
archivo.write(main())
archivo.close()